package AlphaPackage;

import HelperFiles.PrintUtilities;
import java.awt.Toolkit;
import java.awt.print.PrinterException;
import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *******************************************************************************
 * File name PrintQueueSimulationGUI.java
 * <br>Description This is the main GUI that displays countries and info about
 * them.
 * <br>Created on 3/2/2018 macOS Sierra, Version 10.12.1, NetBeans 8.2, jdk
 * 1.8.0_144
 *
 * @author Illarion Eremenko
 * @version 1.0.4  <pre> 
 *   project:       Project #3, Print Queue Simulation
 *   platform:      JDK 1.8.0_141
 *   IDE:           Netbeans 8.2
 *   course:        CS142,
 *   hours:         many many minutes
 * </pre>
 *
 * @see             HelperFiles.PrintUtilities
 * @see             java.awt.Toolkit
 * @see             java.awt.print.PrinterException
 * @see             java.util.logging.Level
 * @see             java.util.logging.Logger
 * ****************************************************************************
 */
public class PrintQueueSimulationGUI extends javax.swing.JFrame {

    public static int numberOfServers;
    public static int duration;                        //of each job
    public static int interval;      //arrival between jobs
    public static int meanJobSize;
    public static StringBuffer output = new StringBuffer();
    private static Queue clients = new Queue();

    private static int averageNumberJobsQueue = 0;
    private static int averageNumberJobsSystem = 0;
    private static int averageTimeJobsQueue = 0;
    private static int averageTimeJobsSystem = 0;
    private static int[] averageServiceTimeServers = new int[numberOfServers];
    private static int averageServiceTimeClients = 0;
    private static int[] averageIdleTimeServers = new int[numberOfServers];
    
    
    
    /**
     * @param args the command line arguments
     * @throws java.lang.InterruptedException delegated exception
     */
    public static void main(String args[]) throws InterruptedException {
        PrintQueueSimulationGUI myGUI = new PrintQueueSimulationGUI();
    }

    /**
     * Creates new form PrintQueueSimulationGUI includes many components, I also add my own
     * JMenu which displays rating information.
     *
     * @throws java.lang.InterruptedException If the Thread messes up
     */
    public PrintQueueSimulationGUI() throws InterruptedException {
        initComponents();
        //set icon image of JFrame
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/HelperFiles/printer.png"));
        //centers the form at start
        setLocationRelativeTo(null);

        SplashScreen splash = new SplashScreen();
        splash.setVisible(true);
        Thread.sleep(5350);
        splash.dispose();
        minServersJLabel.setText(serversJSlider.getMinimum() + "");
        minMeanIntervalJLabel.setText(meanIntervalJSlider.getMinimum() + "");
        minMeanDurationJLabel.setText(meanDurationJSlider.getMinimum() + "");
        minMeanJobSizeJLabel.setText(meanJobSizeJSlider.getMinimum() + "");
        maxServersJLabel.setText(serversJSlider.getMaximum() + "");
        maxMeanIntervalJLabel.setText(meanIntervalJSlider.getMaximum() + "");
        maxMeanDurationJLabel.setText(meanDurationJSlider.getMaximum() + "");
        maxMeanJobSizeJLabel.setText(meanJobSizeJSlider.getMaximum() + "");
        liveServersJLabel.setText(serversJSlider.getValue() + "");
        liveMeanIntervalJLabel.setText(meanIntervalJSlider.getValue() + "");
        liveMeanDurationJLabel.setText(meanDurationJSlider.getValue() + "");
        liveMeanJobSizeJLabel.setText(meanJobSizeJSlider.getValue() + "");
        this.setVisible(true);
    }

    /**
     * Just a setter
     * @param time time to add
     */
    public static void setAverageServiceTimeClients(int time){
        averageServiceTimeClients += time;
    }
    /**
     *     Just adds a line of output to buffer, no needed can just access buffer
     * directly, but maybe in the comments you can tell me if this is morally correct.
     * @param line  Line of text to append to alpa buffer
     */
    public static void addToBuffer(String line) {
        output.append(line);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menubuttonGroup = new javax.swing.ButtonGroup();
        mainJPanel = new javax.swing.JPanel();
        labelJPanel = new javax.swing.JPanel();
        serversJLabel = new javax.swing.JLabel();
        meanIntervalJLabel = new javax.swing.JLabel();
        meanDurationJLabel = new javax.swing.JLabel();
        meanJobSizeJLabel = new javax.swing.JLabel();
        minJPanel = new javax.swing.JPanel();
        minServersJLabel = new javax.swing.JLabel();
        minMeanIntervalJLabel = new javax.swing.JLabel();
        minMeanDurationJLabel = new javax.swing.JLabel();
        minMeanJobSizeJLabel = new javax.swing.JLabel();
        slidersJPanel = new javax.swing.JPanel();
        serversJSlider = new javax.swing.JSlider();
        meanIntervalJSlider = new javax.swing.JSlider();
        meanDurationJSlider = new javax.swing.JSlider();
        meanJobSizeJSlider = new javax.swing.JSlider();
        maxJPanel = new javax.swing.JPanel();
        maxServersJLabel = new javax.swing.JLabel();
        maxMeanIntervalJLabel = new javax.swing.JLabel();
        maxMeanDurationJLabel = new javax.swing.JLabel();
        maxMeanJobSizeJLabel = new javax.swing.JLabel();
        displayJPanel = new javax.swing.JPanel();
        serversJLabel1 = new javax.swing.JLabel();
        meanIntervalJLabel1 = new javax.swing.JLabel();
        meanDurationJLabel1 = new javax.swing.JLabel();
        meanDurationJLabel2 = new javax.swing.JLabel();
        liveServersJLabel = new javax.swing.JLabel();
        liveMeanIntervalJLabel = new javax.swing.JLabel();
        liveMeanDurationJLabel = new javax.swing.JLabel();
        liveMeanJobSizeJLabel = new javax.swing.JLabel();
        controlJPanel = new javax.swing.JPanel();
        runJButton = new javax.swing.JButton();
        printJButton = new javax.swing.JButton();
        clearJButton = new javax.swing.JButton();
        exitJButton = new javax.swing.JButton();
        listJPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        displayJTextArea = new javax.swing.JTextArea();
        countriesJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        printGUIJMenuItem = new javax.swing.JMenuItem();
        printOutputJMenuItem = new javax.swing.JMenuItem();
        fileJSeparator1 = new javax.swing.JPopupMenu.Separator();
        clearJMenuItem = new javax.swing.JMenuItem();
        fileJSeparator2 = new javax.swing.JPopupMenu.Separator();
        exitJMenuItem = new javax.swing.JMenuItem();
        actionJMenu = new javax.swing.JMenu();
        runJMenuItem = new javax.swing.JMenuItem();
        resetJMenuItem = new javax.swing.JMenuItem();
        helpJMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        mainJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Control"));

        labelJPanel.setLayout(new java.awt.GridLayout(4, 1));

        serversJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        serversJLabel.setText("Printers:");
        serversJLabel.setToolTipText("Select the number of Printers (in seconds, can be changed in settings)");
        labelJPanel.add(serversJLabel);

        meanIntervalJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        meanIntervalJLabel.setText("Mean interval:");
        meanIntervalJLabel.setToolTipText("Select the average interval between jobs (in seconds, can be changed in settings)");
        labelJPanel.add(meanIntervalJLabel);

        meanDurationJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        meanDurationJLabel.setText("Duration:");
        meanDurationJLabel.setToolTipText("The average duration of each job");
        labelJPanel.add(meanDurationJLabel);

        meanJobSizeJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        meanJobSizeJLabel.setText("Mean Job size:");
        meanJobSizeJLabel.setToolTipText("The average duration of each job");
        labelJPanel.add(meanJobSizeJLabel);

        minJPanel.setLayout(new java.awt.GridLayout(4, 1));

        minServersJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        minServersJLabel.setText("1");
        minServersJLabel.setToolTipText("Select the number of Printers (in seconds, can be changed in settings)");
        minJPanel.add(minServersJLabel);

        minMeanIntervalJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        minMeanIntervalJLabel.setText("1");
        minMeanIntervalJLabel.setToolTipText("Select the average interval between jobs (in seconds, can be changed in settings)");
        minJPanel.add(minMeanIntervalJLabel);

        minMeanDurationJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        minMeanDurationJLabel.setText("1");
        minMeanDurationJLabel.setToolTipText("The average duration of each job");
        minJPanel.add(minMeanDurationJLabel);

        minMeanJobSizeJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        minMeanJobSizeJLabel.setText("1");
        minMeanJobSizeJLabel.setToolTipText("The average duration of each job");
        minJPanel.add(minMeanJobSizeJLabel);

        slidersJPanel.setLayout(new java.awt.GridLayout(4, 1));

        serversJSlider.setMaximum(10);
        serversJSlider.setMinimum(1);
        serversJSlider.setPaintLabels(true);
        serversJSlider.setPaintTicks(true);
        serversJSlider.setToolTipText("The amount of Printers");
        serversJSlider.setValue(3);
        serversJSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                serversJSliderStateChanged(evt);
            }
        });
        slidersJPanel.add(serversJSlider);

        meanIntervalJSlider.setMaximum(50);
        meanIntervalJSlider.setMinimum(5);
        meanIntervalJSlider.setPaintLabels(true);
        meanIntervalJSlider.setPaintTicks(true);
        meanIntervalJSlider.setToolTipText("Interval between each job");
        meanIntervalJSlider.setValue(10);
        meanIntervalJSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                meanIntervalJSliderStateChanged(evt);
            }
        });
        slidersJPanel.add(meanIntervalJSlider);

        meanDurationJSlider.setMaximum(500);
        meanDurationJSlider.setMinimum(30);
        meanDurationJSlider.setPaintLabels(true);
        meanDurationJSlider.setPaintTicks(true);
        meanDurationJSlider.setToolTipText("the amount of time the servers are working");
        meanDurationJSlider.setValue(200);
        meanDurationJSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                meanDurationJSliderStateChanged(evt);
            }
        });
        slidersJPanel.add(meanDurationJSlider);

        meanJobSizeJSlider.setMaximum(150);
        meanJobSizeJSlider.setMinimum(20);
        meanJobSizeJSlider.setPaintLabels(true);
        meanJobSizeJSlider.setPaintTicks(true);
        meanJobSizeJSlider.setToolTipText("Average job size in pages");
        meanJobSizeJSlider.setValue(100);
        meanJobSizeJSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                meanJobSizeJSliderStateChanged(evt);
            }
        });
        slidersJPanel.add(meanJobSizeJSlider);

        maxJPanel.setLayout(new java.awt.GridLayout(4, 1));

        maxServersJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        maxServersJLabel.setText("1");
        maxServersJLabel.setToolTipText("Select the number of Printers (in seconds, can be changed in settings)");
        maxJPanel.add(maxServersJLabel);

        maxMeanIntervalJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        maxMeanIntervalJLabel.setText("1");
        maxMeanIntervalJLabel.setToolTipText("Select the average interval between jobs (in seconds, can be changed in settings)");
        maxJPanel.add(maxMeanIntervalJLabel);

        maxMeanDurationJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        maxMeanDurationJLabel.setText("1");
        maxMeanDurationJLabel.setToolTipText("The average duration of each job");
        maxJPanel.add(maxMeanDurationJLabel);

        maxMeanJobSizeJLabel.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        maxMeanJobSizeJLabel.setText("1");
        maxMeanJobSizeJLabel.setToolTipText("The average duration of each job");
        maxJPanel.add(maxMeanJobSizeJLabel);

        displayJPanel.setLayout(new java.awt.GridLayout(2, 4, 3, 0));

        serversJLabel1.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        serversJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        serversJLabel1.setText("Printers");
        serversJLabel1.setToolTipText("Select the number of Printers (in seconds, can be changed in settings)");
        displayJPanel.add(serversJLabel1);

        meanIntervalJLabel1.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        meanIntervalJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        meanIntervalJLabel1.setText("Mean interval");
        meanIntervalJLabel1.setToolTipText("Select the average interval between jobs (in seconds, can be changed in settings)");
        displayJPanel.add(meanIntervalJLabel1);

        meanDurationJLabel1.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        meanDurationJLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        meanDurationJLabel1.setText("Duration");
        meanDurationJLabel1.setToolTipText("The average duration of each job");
        displayJPanel.add(meanDurationJLabel1);

        meanDurationJLabel2.setFont(new java.awt.Font("Kokonor", 0, 13)); // NOI18N
        meanDurationJLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        meanDurationJLabel2.setText("Mean Job Size");
        meanDurationJLabel2.setToolTipText("The average duration of each job");
        displayJPanel.add(meanDurationJLabel2);

        liveServersJLabel.setFont(new java.awt.Font("Phosphate", 1, 18)); // NOI18N
        liveServersJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        liveServersJLabel.setText("10");
        liveServersJLabel.setToolTipText("Printers Selected");
        displayJPanel.add(liveServersJLabel);

        liveMeanIntervalJLabel.setFont(new java.awt.Font("Phosphate", 1, 18)); // NOI18N
        liveMeanIntervalJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        liveMeanIntervalJLabel.setText("10");
        liveMeanIntervalJLabel.setToolTipText("Mean interval between each job");
        displayJPanel.add(liveMeanIntervalJLabel);

        liveMeanDurationJLabel.setFont(new java.awt.Font("Phosphate", 1, 18)); // NOI18N
        liveMeanDurationJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        liveMeanDurationJLabel.setText("10");
        liveMeanDurationJLabel.setToolTipText("Mean Duration of each server");
        displayJPanel.add(liveMeanDurationJLabel);

        liveMeanJobSizeJLabel.setFont(new java.awt.Font("Phosphate", 1, 18)); // NOI18N
        liveMeanJobSizeJLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        liveMeanJobSizeJLabel.setText("10");
        liveMeanJobSizeJLabel.setToolTipText("Mean Duration of each server");
        displayJPanel.add(liveMeanJobSizeJLabel);

        controlJPanel.setLayout(new java.awt.GridLayout(1, 0));

        runJButton.setMnemonic('R');
        runJButton.setText("Run");
        runJButton.setToolTipText("Enter the parameters on the sliders and start the simulation.");
        runJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(runJButton);

        printJButton.setText("Print Output");
        printJButton.setToolTipText("Print the text in the text area");
        printJButton.setEnabled(false);
        printJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(printJButton);

        clearJButton.setText("Reset");
        clearJButton.setToolTipText("Reset All statistics");
        clearJButton.setEnabled(false);
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(clearJButton);

        exitJButton.setText("Exit");
        exitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(exitJButton);

        javax.swing.GroupLayout mainJPanelLayout = new javax.swing.GroupLayout(mainJPanel);
        mainJPanel.setLayout(mainJPanelLayout);
        mainJPanelLayout.setHorizontalGroup(
            mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(controlJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 489, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(mainJPanelLayout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(displayJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, mainJPanelLayout.createSequentialGroup()
                            .addGap(18, 18, 18)
                            .addComponent(labelJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(8, 8, 8)
                            .addComponent(minJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(slidersJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(7, 7, 7)
                            .addComponent(maxJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 41, Short.MAX_VALUE))
        );
        mainJPanelLayout.setVerticalGroup(
            mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainJPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(slidersJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(maxJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(minJPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                        .addComponent(labelJPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(displayJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        listJPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Feed/Statistics"));

        displayJTextArea.setEditable(false);
        displayJTextArea.setBackground(new java.awt.Color(240, 240, 240));
        displayJTextArea.setColumns(20);
        displayJTextArea.setRows(5);
        displayJTextArea.setToolTipText("Information from the servers and printers");
        displayJTextArea.setFocusable(false);
        jScrollPane2.setViewportView(displayJTextArea);

        javax.swing.GroupLayout listJPanelLayout = new javax.swing.GroupLayout(listJPanel);
        listJPanel.setLayout(listJPanelLayout);
        listJPanelLayout.setHorizontalGroup(
            listJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listJPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        listJPanelLayout.setVerticalGroup(
            listJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        printGUIJMenuItem.setMnemonic('P');
        printGUIJMenuItem.setText("Print Form");
        printGUIJMenuItem.setToolTipText("Print GUI form");
        printGUIJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printGUIJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printGUIJMenuItem);

        printOutputJMenuItem.setMnemonic('P');
        printOutputJMenuItem.setText("Print Output");
        printOutputJMenuItem.setToolTipText("Print output");
        printOutputJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printOutputJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printOutputJMenuItem);
        fileJMenu.add(fileJSeparator1);

        clearJMenuItem.setMnemonic('P');
        clearJMenuItem.setText("Clear");
        clearJMenuItem.setToolTipText("Clear GUI form");
        clearJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(clearJMenuItem);
        fileJMenu.add(fileJSeparator2);

        exitJMenuItem.setMnemonic('x');
        exitJMenuItem.setText("Exit");
        exitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitJMenuItem);

        countriesJMenuBar.add(fileJMenu);

        actionJMenu.setText("Action");
        actionJMenu.setToolTipText("");

        runJMenuItem.setText("Run");
        runJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(runJMenuItem);

        resetJMenuItem.setText("Reset");
        resetJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetJMenuItemActionPerformed(evt);
            }
        });
        actionJMenu.add(resetJMenuItem);

        countriesJMenuBar.add(actionJMenu);

        helpJMenu.setMnemonic('H');
        helpJMenu.setText("Help");

        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpJMenu.add(aboutJMenuItem);

        countriesJMenuBar.add(helpJMenu);

        setJMenuBar(countriesJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mainJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(mainJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void printGUIJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printGUIJMenuItemActionPerformed
        // Call the PrintUtilities.PrintComponent() method
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printGUIJMenuItemActionPerformed

    /**
     * Exits GUI.
     *
     * @param evt ActionEvent
     */
    private void exitJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJMenuItemActionPerformed
        // Quit the application
        System.exit(0);
    }//GEN-LAST:event_exitJMenuItemActionPerformed

    /**
     * Opens up the about form
     *
     * @param evt ActionEvent
     */
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutJMenuItemActionPerformed
        //Display About form
        AboutGUI about = new AboutGUI(this, true);
        about.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed

    /**
     * Dynamic updates from slider.
     * @param evt action event
     */
    private void serversJSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_serversJSliderStateChanged
        liveServersJLabel.setText(serversJSlider.getValue() + "");
    }//GEN-LAST:event_serversJSliderStateChanged

    /**
     * Dynamic updates from slider.
     * @param evt action event
     */
    private void meanIntervalJSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_meanIntervalJSliderStateChanged
        liveMeanIntervalJLabel.setText(meanIntervalJSlider.getValue() + "");
    }//GEN-LAST:event_meanIntervalJSliderStateChanged

    /**
     * Dynamic updates from slider.
     * @param evt action event
     */
    private void meanDurationJSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_meanDurationJSliderStateChanged
        liveMeanDurationJLabel.setText(meanDurationJSlider.getValue() + "");
    }//GEN-LAST:event_meanDurationJSliderStateChanged

    /**
     * Dynamic updates from slider.
     * @param evt action event
     */
    private void meanJobSizeJSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_meanJobSizeJSliderStateChanged
        liveMeanJobSizeJLabel.setText(meanJobSizeJSlider.getValue() + "");
    }//GEN-LAST:event_meanJobSizeJSliderStateChanged

    /**
     * Runs the whole GUI, handles the passing of clients to servers.
     * @param evt 
     */
    private void runJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runJButtonActionPerformed
            // TODO add your handling code here:
            runJButton.setEnabled(false);
            runJMenuItem.setEnabled(false);
            clearJButton.setEnabled(true);
            clearJMenuItem.setEnabled(true);
            printJButton.setEnabled(true);
            numberOfServers = serversJSlider.getValue();
            interval = meanIntervalJSlider.getValue();
            duration = meanDurationJSlider.getValue();
            meanJobSize = meanJobSizeJSlider.getValue();
            Server[] servers = new Server[numberOfServers];
            Random rand = new Random(interval);
            //create servers
            for (int i = 0; i < numberOfServers; i++) {
                servers[i] = new Server();
            }
            
            int timeOfNextArrival = rand.intNextExponential();
            for (int t = 0; t < duration; t++) {
                //add number of jobs in queue
                averageNumberJobsQueue += clients.size();
                //add number of jobs in system
                for(int j = 0; j < servers.length; j++){
                    if(!servers[j].isFree())
                        averageNumberJobsSystem++;
                }
                averageTimeJobsQueue += clients.size();
                //no one is coming until this generated number
                if (t == timeOfNextArrival) {
                    //add client when its their time
                    clients.enqueue(new Client(t));
                    addToBuffer(print(clients) + "\n"); //the queue now contains...
                    timeOfNextArrival += rand.intNextExponential();
                }
                for (int i = 0; i < numberOfServers; i++) {
                    if(servers[i].isFree()){
                        servers[i].addIdleTime(1);
                    } else {
                        servers[i].addWorkTime(1);
                    }
                    if (servers[i].isFree()) {
                        if (!clients.isEmpty()) {
                            servers[i].beginServing((Client) clients.dequeue(), t);
                            addToBuffer(print(clients) + "\n");
                        }
                    } else if (t == servers[i].getTimeServiceEnds()) { //end the job if the time the job takes is equal to real time, t
                        servers[i].endServing(t);
                    }
                }
            }
            //last touches for statistics
            averageServiceTimeServers = new int[numberOfServers];
            averageIdleTimeServers = new int[numberOfServers];
            averageTimeJobsSystem = averageTimeJobsQueue + averageServiceTimeClients;
            for(int i = 0; i < numberOfServers; i++){
                averageServiceTimeServers[i] = servers[i].getWork();
                averageIdleTimeServers[i] = servers[i].getIdle();
            }
            //display all statistics
//            System.out.println("Average Number of jobs in System: " + (double)averageNumberJobsSystem / duration);
//            System.out.println("Average Number of jobs in Queue: " + (double)averageNumberJobsQueue / duration);
//            System.out.println("Average Time a job spends in System: " + (double)averageTimeJobsSystem / Client.getId());
//            System.out.println("Average Time a job spends in Queue: " + (double)averageTimeJobsQueue / Client.getId());
//            System.out.println("Average Service time for each Job: " + (double)averageServiceTimeClients / (Client.getId() - clients.size()));
//            System.out.println("Average work service time for each server: " + Arrays.toString(averageServiceTimeServers));
//            System.out.println("Average work idle time for each server: " + Arrays.toString(averageIdleTimeServers) + "\n");
            DecimalFormat format = new DecimalFormat("#,##0.##");
            output.append("\nStatistics:\nAverage Number of jobs in System: " + format.format((double)averageNumberJobsSystem / duration) + " jobs\n");
            output.append("Average Number of jobs in Queue: " + format.format((double)averageNumberJobsQueue / duration) + " jobs\n");
            output.append("Average Time a job spends in System: " + format.format((double)averageTimeJobsSystem / Client.getId()) + " seconds\n");
            output.append("Average Time a job spends in Queue: " + format.format((double)averageTimeJobsQueue / Client.getId()) + " seconds\n");
            output.append("Average Service time for each Job: " + format.format((double)averageServiceTimeClients / (Client.getId() - clients.size())) + " seconds\n");
            output.append("Average work time for each server: " + Arrays.toString(averageServiceTimeServers) + " (respectively per server)\n");
            output.append("Average idle time for each server: " + Arrays.toString(averageIdleTimeServers) + " (respectively per server)\n");
            //used labels originally
//            aveJobsSysLabel.setText("Average Number of jobs in System: " + format.format((double)averageNumberJobsSystem / duration));
//            aveJobsQueLabel.setText("Average Number of jobs in Queue: " + format.format((double)averageNumberJobsQueue / duration));
//            aveTimeJobSysLabel.setText("Average Time a job spends in System: " + format.format((double)averageTimeJobsSystem / Client.getId()));
//            aveTimeJobsQueLabel.setText("Average Time a job spends in Queue: " + format.format((double)averageTimeJobsQueue / Client.getId()));
//            aveServeTimeLabel.setText("Average Service time for each Job: " + format.format((double)averageServiceTimeClients / (Client.getId() - clients.size())));
//            aveWorkPerServerLabel.setText("Average work time for each server: " + Arrays.toString(averageServiceTimeServers));
//            aveIdlePerServerLabel.setText("Average idle time for each server: " + Arrays.toString(averageIdleTimeServers));
            displayJTextArea.setText(output.toString());        
    }//GEN-LAST:event_runJButtonActionPerformed

    /**
     * Basically resets everything
     * @param evt   actionEvent
     */
    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJButtonActionPerformed
        runJButton.setEnabled(true);
        runJMenuItem.setEnabled(true);
        clearJButton.setEnabled(false);
        clearJMenuItem.setEnabled(false);
        printJButton.setEnabled(false);
        reset();
        displayJTextArea.setText("");
        averageNumberJobsQueue = 0;
        averageNumberJobsSystem = 0;
        averageTimeJobsSystem = 0;
        averageTimeJobsQueue = 0;
        averageServiceTimeClients = 0;
        //could make it so the sliders reset to their default state
//        serversJSlider.setValue(3);
//        meanIntervalJSlider.setValue(10);
//        meanDurationJSlider.setValue(100);
//        meanJobSizeJSlider.setValue(100);
        
    }//GEN-LAST:event_clearJButtonActionPerformed

    /**
     * Reset the queue, along with servers.
     */
    private void reset() {
        while(!clients.isEmpty()){
            clients.dequeue();
        }
        output.setLength(0);
        Client.setnextID(0);
        Server.setNextID('A');
    }
    private void printOutputJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printOutputJMenuItemActionPerformed
        try {
            displayJTextArea.print();
        } catch (PrinterException ex) {
            Logger.getLogger(PrintQueueSimulationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printOutputJMenuItemActionPerformed

    /**
     * Calls the printOutputJMenuItemActionPerformed method
     * @param evt   ActionEvent
     */
    private void printJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printJButtonActionPerformed
        printOutputJMenuItemActionPerformed(evt);
    }//GEN-LAST:event_printJButtonActionPerformed

    /**
     * Exits method
     * @param evt   Action Event
     */
    private void exitJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitJButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitJButtonActionPerformed

    /**
     * calls another method
     * @param evt   actionevent
     */
    private void clearJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJMenuItemActionPerformed
        clearJButtonActionPerformed(evt);
        
    }//GEN-LAST:event_clearJMenuItemActionPerformed

    /**
     * Run method
     * @param evt actionevent
     */
    private void runJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runJMenuItemActionPerformed
         runJButtonActionPerformed(evt);
    }//GEN-LAST:event_runJMenuItemActionPerformed

    /**
     * Just clear
     * @param evt actionevent
     */
    private void resetJMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetJMenuItemActionPerformed
        clearJButtonActionPerformed(evt);
    }//GEN-LAST:event_resetJMenuItemActionPerformed
    /**
     * Calls the queue's print method
     * @param myQueue
     * @return 
     */
    private String print(Queue myQueue) {
        if (myQueue.isEmpty()) {
            //System.out.println("Queue is now empty");
            return "Queue is now empty";
        } else {
            //System.out.print("The queue now contains " + " jobs: ");
            //myQueue.print();
            return "The queue now contains " + myQueue.size() + " job(s): " + myQueue.print();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JMenu actionJMenu;
    private javax.swing.JButton clearJButton;
    private javax.swing.JMenuItem clearJMenuItem;
    private javax.swing.JPanel controlJPanel;
    private javax.swing.JMenuBar countriesJMenuBar;
    private javax.swing.JPanel displayJPanel;
    private javax.swing.JTextArea displayJTextArea;
    private javax.swing.JButton exitJButton;
    private javax.swing.JMenuItem exitJMenuItem;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JPopupMenu.Separator fileJSeparator1;
    private javax.swing.JPopupMenu.Separator fileJSeparator2;
    private javax.swing.JMenu helpJMenu;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel labelJPanel;
    private javax.swing.JPanel listJPanel;
    private javax.swing.JLabel liveMeanDurationJLabel;
    private javax.swing.JLabel liveMeanIntervalJLabel;
    private javax.swing.JLabel liveMeanJobSizeJLabel;
    private javax.swing.JLabel liveServersJLabel;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JPanel maxJPanel;
    private javax.swing.JLabel maxMeanDurationJLabel;
    private javax.swing.JLabel maxMeanIntervalJLabel;
    private javax.swing.JLabel maxMeanJobSizeJLabel;
    private javax.swing.JLabel maxServersJLabel;
    private javax.swing.JLabel meanDurationJLabel;
    private javax.swing.JLabel meanDurationJLabel1;
    private javax.swing.JLabel meanDurationJLabel2;
    private javax.swing.JSlider meanDurationJSlider;
    private javax.swing.JLabel meanIntervalJLabel;
    private javax.swing.JLabel meanIntervalJLabel1;
    private javax.swing.JSlider meanIntervalJSlider;
    private javax.swing.JLabel meanJobSizeJLabel;
    private javax.swing.JSlider meanJobSizeJSlider;
    private javax.swing.ButtonGroup menubuttonGroup;
    private javax.swing.JPanel minJPanel;
    private javax.swing.JLabel minMeanDurationJLabel;
    private javax.swing.JLabel minMeanIntervalJLabel;
    private javax.swing.JLabel minMeanJobSizeJLabel;
    private javax.swing.JLabel minServersJLabel;
    private javax.swing.JMenuItem printGUIJMenuItem;
    private javax.swing.JButton printJButton;
    private javax.swing.JMenuItem printOutputJMenuItem;
    private javax.swing.JMenuItem resetJMenuItem;
    private javax.swing.JButton runJButton;
    private javax.swing.JMenuItem runJMenuItem;
    private javax.swing.JLabel serversJLabel;
    private javax.swing.JLabel serversJLabel1;
    private javax.swing.JSlider serversJSlider;
    private javax.swing.JPanel slidersJPanel;
    // End of variables declaration//GEN-END:variables
}
